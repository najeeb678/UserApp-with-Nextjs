"use client";

import React, { useState } from "react";
import { Box, Typography } from "@mui/material";
import { useFormik } from "formik";
import { useDispatch, useSelector } from "react-redux";

import GlobalInput from "../../../components/UI/GlobalInput";
import GlobalButton from "../../../components/UI/GlobalButton";
import { loginSchema } from "../../../schemas/loginSchema";
import { useRouter } from "next/navigation";

import { postLoginData } from "@/redux/slices/userDetails";
//import { RootState } from "@/redux/slices/userDetails";
import { AppThunkDispatch } from "@/redux/slices/userDetails";

const LoginForm = () => {
  const router = useRouter();
  const dispatch = useDispatch<AppThunkDispatch>();
  const Error = useSelector((state: any) => state.app.loginError);
  console.log(Error);

  //const [logInError, setLogInError] = useState<string | null>(Error);

  //console.log(Error);

  // states
  const initialValues = {
    email: "",
    password: "",
  };

  // functions
  const handleSignUp = () => {
    router.push("/signUp");
  };

  const { handleChange, handleBlur, handleSubmit, touched, values, errors } =
    useFormik({
      initialValues: initialValues,
      validationSchema: loginSchema,
      onSubmit: async (values, action) => {
        // console.log("login");
        // console.log(values);

        // try {
        //   await dispatch(postLoginData(values));

        //   router.push("/home");
        // } catch (err) {
        //   throw err;
        // }

        // action.resetForm();

        try {
          await dispatch(postLoginData(values));
          // No error occurred, redirect to home
        } catch (err: any) {
          if (!err) {
            router.push("/home");
          }
          // An error occurred during login
          console.error("Login error:", err);
          // Update component state with the error
          //setLogInError(err.message || "Unknown error occurred");
        }

        action.resetForm();
      },
    });

  return (
    <Box
      sx={{
        display: "flex",
        justifyContent: "center",
        alignItems: "center",
        minHeight: "100vh",
      }}
    >
      <Box
        sx={{
          width: "400px",
          boxShadow: "0 4px 8px rgba(0, 0, 0, 0.8)",
          padding: 2,
          borderRadius: 4,
          textAlign: "center",
        }}
      >
        <Typography variant="h4" fontWeight="fontWeightBold" padding={3}>
          Login Page
        </Typography>
        {Error && Error.trim() !== "" && (
          <Typography color="error">{Error}</Typography>
        )}

        <form>
          <GlobalInput
            name="email"
            label="Email"
            type="email"
            value={values.email}
            onChangehandler={handleChange}
            onBlurHandler={handleBlur}
            values={values}
            helperText={
              touched.email && errors.email ? errors.email : undefined
            }
          />
          <GlobalInput
            name="password"
            label="Password"
            type="password"
            value={values.password}
            onChangehandler={handleChange}
            onBlurHandler={handleBlur}
            values={values}
            helperText={
              touched.password && errors.password ? errors.password : undefined
            }
          />

          <Box sx={{ display: "flex", justifyContent: "center", gap: "15px" }}>
            <GlobalButton
              variant="contained"
              color="success"
              title="Log In"
              type="submit"
              onClick={() => {
                handleSubmit();
              }}
            />

            <GlobalButton
              variant="contained"
              color="secondary"
              title="Sign Up"
              onClick={handleSignUp}
            />
          </Box>
        </form>
      </Box>
    </Box>
  );
};

export default LoginForm;
import { configureStore } from "@reduxjs/toolkit";
import userDetails from "../slices/userDetails"
const store = configureStore({
    reducer: {
        app: userDetails
    }
});
export default store;
import {
    Action,
    ThunkDispatch,
    createAsyncThunk,
    createSlice,
  } from "@reduxjs/toolkit";
  import axios from "axios";
  
  export const postUserData = createAsyncThunk(
    "userDetails/signUpData",
    async (userData: UserData, { rejectWithValue }) => {
      try {
        const response = await axios.post(
          "https://e157-116-58-9-130.ngrok-free.app/auth/signup",
          userData
        );
        return response.data;
      } catch (error: any) {
        if (error.response.data.message && error.response.status === 400) {
          throw rejectWithValue("User Already Exist : please login");
        }
        throw error;
      }
    }
  );
  
  export const postLoginData = createAsyncThunk(
    "userDetails/postLoginData",
    async (loginData: loginData, { rejectWithValue }) => {
      try {
        const response = await axios.post(
          "https://e157-116-58-9-130.ngrok-free.app/auth/signin",
          loginData
        );
        localStorage.setItem("token", response.data.token);
        return response.data;
      } catch (error: any) {
        if (error.response || error.response.status === 401) {
          // Unauthorized - password doesn't match
          return rejectWithValue("Password doesn't match");
        }
        throw error;
      }
    }
  );
  export interface loginData {
    email: string;
    password: string;
  }
  export interface UserData {
    id?: number;
    name: string;
    email: string;
    password: string;
    phone: string;
  }
  export interface UserDetailState {
  
    users: UserData[];
    loading: boolean;
    loginError: string | null;
    signupError: string | null;
    token: string | null;
  }
  const initialState: UserDetailState = {
    users: [],
    loading: false,
    signupError: null,
    loginError: null,
    token: null,
  };
  
  const userDetailSlice = createSlice({
    name: "userDetails",
    initialState,
    reducers: {},
    extraReducers: (builder) => {
      builder
        .addCase(postUserData.pending, (state) => {
          state.loading = true;
          state.signupError = null;
        })
        .addCase(postUserData.fulfilled, (state, action) => {
          state.loading = false;
          state.signupError = null;
          state.users.push(action.payload);
        })
        .addCase(postUserData.rejected, (state, action) => {
          state.loading = false;
          state.signupError = action.error.message || "Unknown error";
        })
        .addCase(postLoginData.pending, (state) => {
          state.loading = true;
          state.loginError = null;
        })
        .addCase(postLoginData.fulfilled, (state, action) => {
          state.loading = false;
          state.loginError = null;
          state.token = action.payload.token;
        })
        .addCase(postLoginData.rejected, (state, action) => {
          state.loading = false;
          state.loginError = action.error.message || "Unknown error";
          console.log(action.error.message);
        });
    },
  });
  
  export default userDetailSlice.reducer;
  //export type RootState = ReturnType<typeof userDetailSlice.reducer>;
  export type AppThunkDispatch = ThunkDispatch<UserDetailState, any, Action>;
  