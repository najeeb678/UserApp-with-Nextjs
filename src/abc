import {
  Action,
  ThunkDispatch,
  createAsyncThunk,
  createSlice,
} from "@reduxjs/toolkit";
import axios from "axios";

export const postUserData = createAsyncThunk(
  "userDetails/signUpData",
  async (userData: UserData, { rejectWithValue }) => {
    try {
      const response = await axios.post(
        "https://e157-116-58-9-130.ngrok-free.app/auth/signup",
        userData
      );
      return response.data;
    } catch (error: any) {
      if (error.response.data.message && error.response.status === 400) {
        throw rejectWithValue("User Already Exist : please login");
      }
      throw error;
    }
  }
);

export const postLoginData = createAsyncThunk(
  "userDetails/postLoginData",
  async (loginData: loginData, { rejectWithValue }) => {
    try {
      const response = await axios.post(
        "https://e157-116-58-9-130.ngrok-free.app/auth/signin",
        loginData
      );
      localStorage.setItem("token", response.data.token);
      return response.data;
    } catch (error: any) {
      if (error.response || error.response.status === 401) {
        // Unauthorized - password doesn't match
        return rejectWithValue("Password doesn't match");
      }
      throw error;
    }
  }
);
export interface loginData {
  email: string;
  password: string;
}
export interface UserData {
  id?: number;
  name: string;
  email: string;
  password: string;
  phone: string;
}
export interface UserDetailState {

  users: UserData[];
  loading: boolean;
  loginError: string | null;
  signupError: string | null;
  token: string | null;
}
const initialState: UserDetailState = {
  users: [],
  loading: false,
  signupError: null,
  loginError: null,
  token: null,
};

const userDetailSlice = createSlice({
  name: "userDetails",
  initialState,
  reducers: {},
  extraReducers: (builder) => {
    builder
      .addCase(postUserData.pending, (state) => {
        state.loading = true;
        state.signupError = null;
      })
      .addCase(postUserData.fulfilled, (state, action) => {
        state.loading = false;
        state.signupError = null;
        state.users.push(action.payload);
      })
      .addCase(postUserData.rejected, (state, action) => {
        state.loading = false;
        state.signupError = action.error.message || "Unknown error";
      })
      .addCase(postLoginData.pending, (state) => {
        state.loading = true;
        state.loginError = null;
      })
      .addCase(postLoginData.fulfilled, (state, action) => {
        state.loading = false;
        state.loginError = null;
        state.token = action.payload.token;
      })
      .addCase(postLoginData.rejected, (state, action) => {
        state.loading = false;
        state.loginError = action.error.message || "Unknown error";
        console.log(action.error.message);
      });
  },
});

export default userDetailSlice.reducer;
//export type RootState = ReturnType<typeof userDetailSlice.reducer>;
export type AppThunkDispatch = ThunkDispatch<UserDetailState, any, Action>;
import { configureStore } from "@reduxjs/toolkit";
import userDetails from "../slices/userDetails"
const store = configureStore({
    reducer: {
        app: userDetails
    }
});
export default store;
"use client";

import React, { useState } from "react";
import { Box, Typography } from "@mui/material";
import { useFormik } from "formik";
import { useDispatch, useSelector } from "react-redux";

import GlobalInput from "../../../components/UI/GlobalInput";
import GlobalButton from "../../../components/UI/GlobalButton";
import { loginSchema } from "../../../schemas/loginSchema";
import { useRouter } from "next/navigation";

import { postLoginData } from "@/redux/slices/userDetails";
//import { RootState } from "@/redux/slices/userDetails";
import { AppThunkDispatch } from "@/redux/slices/userDetails";

const LoginForm = () => {
  const router = useRouter();
  const dispatch = useDispatch<AppThunkDispatch>();
  const Error = useSelector((state: any) => state.app.loginError);
  console.log(Error);

  //const [logInError, setLogInError] = useState<string | null>(Error);

  //console.log(Error);

  // states
  const initialValues = {
    email: "",
    password: "",
  };

  // functions
  const handleSignUp = () => {
    router.push("/signUp");
  };

  const { handleChange, handleBlur, handleSubmit, touched, values, errors } =
    useFormik({
      initialValues: initialValues,
      validationSchema: loginSchema,
      onSubmit: async (values, action) => {
        // console.log("login");
        // console.log(values);

        // try {
        //   await dispatch(postLoginData(values));

        //   router.push("/home");
        // } catch (err) {
        //   throw err;
        // }

        // action.resetForm();

        try {
          await dispatch(postLoginData(values));
          if (!Error) {
            setTimeout(() => {
              router.push("/home");
            }, 2000);

            // No error occurred, redirect to home
          }
        } catch (err: any) {
          // An error occurred during login
          console.error("Login error:", err);
          // Update component state with the error
          //setLogInError(err.message || "Unknown error occurred");
        }

        action.resetForm();
      },
    });

  return (
    <Box
      sx={{
        display: "flex",
        justifyContent: "center",
        alignItems: "center",
        minHeight: "100vh",
      }}
    >
      <Box
        sx={{
          width: "400px",
          boxShadow: "0 4px 8px rgba(0, 0, 0, 0.8)",
          padding: 2,
          borderRadius: 4,
          textAlign: "center",
        }}
      >
        <Typography variant="h4" fontWeight="fontWeightBold" padding={3}>
          Login Page
        </Typography>
        {Error && Error.trim() !== "" && (
          <Typography color="error">{Error}</Typography>
        )}

        <form>
          <GlobalInput
            name="email"
            label="Email"
            type="email"
            value={values.email}
            onChangehandler={handleChange}
            onBlurHandler={handleBlur}
            values={values}
            helperText={
              touched.email && errors.email ? errors.email : undefined
            }
          />
          <GlobalInput
            name="password"
            label="Password"
            type="password"
            value={values.password}
            onChangehandler={handleChange}
            onBlurHandler={handleBlur}
            values={values}
            helperText={
              touched.password && errors.password ? errors.password : undefined
            }
          />

          <Box sx={{ display: "flex", justifyContent: "center", gap: "15px" }}>
            <GlobalButton
              variant="contained"
              color="success"
              title="Log In"
              type="submit"
              onClick={() => {
                handleSubmit();
              }}
            />

            <GlobalButton
              variant="contained"
              color="secondary"
              title="Sign Up"
              onClick={handleSignUp}
            />
          </Box>
        </form>
      </Box>
    </Box>
  );
};

export default LoginForm;
"use client";
import React from "react";

import { useRouter } from "next/navigation";

import { useDispatch, useSelector } from "react-redux";

import { Box, Container, Grid, Paper, Typography } from "@mui/material";
import { useFormik } from "formik";

import GlobalButton from "../../../components/UI/GlobalButton";
import { signupSchema } from "../../../schemas/signupSchema";
import image from "../../../../public/assets/image.jpg";
import GlobalInput from "../../../components/UI/GlobalInput";
import Image from "next/image";
import { postUserData } from "@/redux/slices/userDetails";
//import { RootState } from "@/redux/slices/userDetails";
import { AppThunkDispatch } from "@/redux/slices/userDetails";

const SignUp = () => {
  const router = useRouter();
  const dispatch = useDispatch<AppThunkDispatch>();
  const error = useSelector((state: any) => state.app.signupError);

  const { handleChange, handleBlur, handleSubmit, touched, values, errors } =
    useFormik({
      initialValues: { name: "", email: "", phone: "", password: "" },
      validationSchema: signupSchema,
      onSubmit: async (values, action) => {
        try {
          await dispatch(postUserData(values));
          if (!error) {
            setTimeout(() => {
              router.push("/home");
            }, 2000);
          }
        } catch (err) {
          console.error("Error signing up:", err);
        }
        console.log(values);
        router.push("/");
      },
    });

  return (
    <Container
      sx={{
        display: "flex",
        alignItems: "center",
        justifyContent: "center",
        height: "100vh",
      }}
    >
      <Paper
        sx={{ maxWidth: "80%", maxHeight: "100%", borderRadius: 3, padding: 0 }}
      >
        <Grid container spacing={2}>
          <Grid item xs={12} sm={6} md={6} lg={6}>
            <Box sx={{ padding: 4 }}>
              {error && (
                <Typography variant="body1" sx={{ color: "error.main" }}>
                  {error}
                </Typography>
              )}
              {/* {error && console.log("Error:", error)} */}
              <Box sx={{ marginBottom: 1 }}>
                <Typography variant="h5" fontWeight="bold">
                  Welcome!
                </Typography>
                <Typography variant="h6">To the User Web APP</Typography>
              </Box>

              <form>
                <GlobalInput
                  name="name"
                  label="Name"
                  value={values.name}
                  onChangehandler={handleChange}
                  onBlurHandler={handleBlur}
                  values={values}
                  helperText={
                    touched.name && errors.name ? errors.name : undefined
                  }
                />
                <GlobalInput
                  name="email"
                  label="Email"
                  type="email"
                  value={values.email}
                  onChangehandler={handleChange}
                  onBlurHandler={handleBlur}
                  values={values}
                  helperText={
                    touched.email && errors.email ? errors.email : undefined
                  }
                />
                <GlobalInput
                  name="password"
                  label="Password"
                  type="password"
                  value={values.password}
                  onChangehandler={handleChange}
                  onBlurHandler={handleBlur}
                  values={values}
                  helperText={
                    touched.password && errors.password
                      ? errors.password
                      : undefined
                  }
                />
                <GlobalInput
                  name="phone"
                  label="Phone Number"
                  value={values.phone}
                  onChangehandler={handleChange}
                  onBlurHandler={handleBlur}
                  values={values}
                  helperText={
                    touched.phone && errors.phone ? errors.phone : undefined
                  }
                />
                <GlobalButton
                  variant="contained"
                  color="success"
                  title="Sign Up"
                  type="submit"
                  onClick={() => {
                    handleSubmit();
                  }}
                />
              </form>

              <Box
                sx={{
                  display: "flex",
                  justifyContent: "center",
                  marginTop: "20px",
                  padding: 0,
                }}
              >
                <Typography style={{ fontSize: "15px" }}>
                  Already Have An Account?
                </Typography>
                <a
                  href="/"
                  style={{
                    fontSize: "15px",
                    marginLeft: 1,
                    cursor: "pointer",
                  }}
                >
                  Login Now
                </a>
              </Box>
            </Box>
          </Grid>

          <Grid item xs={12} sm={6} md={6} lg={6}>
            <Image
              src={image}
              alt="my image"
              style={{
                width: "100%",
                height: "100%",
                objectFit: "cover",
                borderTopRightRadius: "10px", // Adjust the value as needed
                borderBottomRightRadius: "10px",
              }}
            />
          </Grid>
        </Grid>
      </Paper>
    </Container>
  );
};

export default SignUp;
